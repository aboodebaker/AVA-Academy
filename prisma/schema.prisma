// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider          = "mongodb"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String               @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?              @unique
  password      String
  emailVerified DateTime?
  image         String?
  messages      Int                  @default(0)
  messageLimit  Int                  @default(200)
  grade         String?
  class         String
  subject       Subject[]
  games         Game[]
  files         Files[]
  notes         Notes[]
  accounts      Account[]
  sessions      Session[]
  activities    Activity[]
  performance   PerformanceSummary[]
  courses       Course[]
}

model Subject {
  id          String               @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  grade       String
  image       String
  userId      String               @db.ObjectId
  uniqueId    String
  files       Files[]
  notes       Notes[]
  performance SubjectPerformance[]
  course      Course[]
  User        User                 @relation(fields: [userId], references: [id])
}

model SubjectPerformance {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  subjectId       String   @db.ObjectId
  date            DateTime @default(now())
  performanceData Json
  Subject         Subject  @relation(fields: [subjectId], references: [id])

  @@index([subjectId])
}

model FilePerformance {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  fileId          String   @db.ObjectId
  performanceData Json
  date            DateTime @default(now())
  Files           Files    @relation(fields: [fileId], references: [id])

  @@index([fileId])
}

model ActivityPerformance {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  activityId      String   @db.ObjectId
  date            DateTime @default(now())
  performanceData Json
  activity        Activity @relation(fields: [activityId], references: [id])

  @@index([activityId])
}

model GamePerformance {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  gameId          String   @db.ObjectId
  date            DateTime @default(now())
  performanceData Json
  game            Game     @relation(fields: [gameId], references: [id])

  @@index([gameId])
}

model Notes {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  title        String?
  subject      String?
  content      String?
  image        String?
  shared       Boolean?
  peopleshared String?
  editorState  String?
  created_at   DateTime?  @default(now())
  User         User?      @relation(fields: [userId], references: [id])
  activities   Activity[]
  userId       String?    @db.ObjectId
  Subject      Subject?   @relation(fields: [subjectId], references: [id])
  subjectId    String?    @db.ObjectId
}

model Files {
  id          String            @id @default(auto()) @map("_id") @db.ObjectId
  pdfName     String            @map("name")
  pdfUrl      String            @map("pdf_url")
  createdAt   DateTime          @default(now())
  userId      String            @map("user_id") @db.ObjectId
  fileKey     String            @map("file_key")
  subjectid   String            @map("subject_id") @db.ObjectId
  edited      Int               @default(0)
  chatpdf     String?           @map("chatpdf")
  grade       String
  games       Game[]
  messages    Message[]         @relation("FileMessages")
  activities  Activity[]
  performance FilePerformance[]
  courses     Course[]
  User        User              @relation(fields: [userId], references: [id])
  Subject     Subject           @relation(fields: [subjectid], references: [id])
}

model Message {
  id        String         @id @default(auto()) @map("_id") @db.ObjectId
  chatId    Int?           @map("chat_id")
  content   String?        @map("content")
  createdAt DateTime       @default(now())
  role      UserSystemEnum @map("role")
  fileId    String         @map("file_id") @db.ObjectId
  files     Files          @relation("FileMessages", fields: [fileId], references: [id])
}

enum UserSystemEnum {
  system
  user
}

enum GameType {
  mcq
  open_ended
}

model Game {
  id              String            @id @default(auto()) @map("_id") @db.ObjectId
  userId          String            @db.ObjectId
  questions       Question[]
  timeStarted     DateTime
  topic           String
  timeEnded       DateTime?
  fileId          String?           @db.ObjectId
  File            Files?            @relation(fields: [fileId], references: [id], onDelete: Cascade)
  gameType        GameType
  user            User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  GamePerformance GamePerformance[]

  @@index([userId])
}

model Question {
  id                String    @id @default(auto()) @map("_id") @db.ObjectId
  question          String
  answer            String
  gameId            String    @db.ObjectId
  options           Json? // for mcq questions
  percentageCorrect Float? // for open_ended questions
  isCorrect         Boolean? // for mcq questions
  questionType      GameType
  userAnswer        String?
  game              Game      @relation(fields: [gameId], references: [id])
  Activity          Activity? @relation(fields: [activityId], references: [id])
  activityId        String?   @db.ObjectId

  @@index([gameId])
}

enum ActivityType {
  mcq
  open_ended
}

model Activity {
  id          String                @id @default(auto()) @map("_id") @db.ObjectId
  uniqueId    String
  userId      String                @db.ObjectId
  questions   QuestionActivity[]
  timeStarted DateTime
  topic       String
  timeEnded   DateTime?
  gameType    ActivityType
  image       String?
  summary     String?
  mpoints     String?
  class       String?
  noteId      String?               @db.ObjectId
  fileId      String                @db.ObjectId
  performance ActivityPerformance[]
  user        User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  file        Files                 @relation(fields: [fileId], references: [id], onDelete: Cascade)
  note        Notes?                @relation(fields: [noteId], references: [id], onDelete: Cascade)
  Question    Question[]

  @@index([userId])
  @@index([fileId])
}

model QuestionActivity {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  question          String
  answer            String
  activityId        String   @db.ObjectId
  options           Json? // for mcq questions
  percentageCorrect Float? // for open_ended questions
  isCorrect         Boolean? // for mcq questions
  questionType      GameType
  userAnswer        String?
  canAnswer         Boolean  @default(true)

  activity Activity @relation(fields: [activityId], references: [id])

  @@index([activityId])
}

model PerformanceSummary {
  id                     String @id @default(auto()) @map("_id") @db.ObjectId
  userId                 String @db.ObjectId
  strengths              Json
  weaknesses             Json
  improvementAreas       Json
  estimatedAverage       Int?
  overallProgress        Float?
  historicalData         Json
  improvementSuggestions Json
  User                   User   @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Course {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  fileId    String?  @db.ObjectId
  subjectId String?  @db.ObjectId
  name      String
  image     String
  show      Boolean  @default(true)
  units     Unit[]
  User      User     @relation(fields: [userId], references: [id])
  File      Files?   @relation(fields: [fileId], references: [id])
  Subject   Subject? @relation(fields: [subjectId], references: [id])
}

// unit contains many chapters
model Unit {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  courseId String @db.ObjectId

  name     String
  course   Course    @relation(fields: [courseId], references: [id])
  chapters Chapter[]

  @@index([courseId], name: "courseId")
}

model Chapter {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  unitId String @db.ObjectId

  name               String
  youtubeSearchQuery String
  videoId            String?
  summary            String?
  unit               Unit             @relation(fields: [unitId], references: [id])
  questions          QuestionCourse[]

  @@index([unitId], name: "unitId")
}

model QuestionCourse {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  chapterId String @db.ObjectId

  question String
  answer   String
  options  String
  chapter  Chapter @relation(fields: [chapterId], references: [id])

  @@index([chapterId], name: "chapterId")
}
