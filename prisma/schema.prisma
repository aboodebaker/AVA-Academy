// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider          = "mongodb"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?    @unique
  password      String
  emailVerified DateTime?
  image         String?
  grade         String?
  class         String
  games         Game[]
  files         Files[]
  notes         Notes[]
  accounts      Account[]
  sessions      Session[]
  activities    Activity[]
}

// model Subject {
//   id     String @id @default(auto()) @map("_id") @db.ObjectId
//   name   String
//   grade  String
//   image  String
//   files  Files[]
//   notes  Notes[]
// }

model Notes {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  title        String?
  subject      String?
  content      String?
  image        String?
  shared       Boolean?
  peopleshared String?
  editorState  String?
  created_at   DateTime?  @default(now())
  User         User?      @relation(fields: [userId], references: [id])
  activities   Activity[]
  userId       String?    @db.ObjectId
}

model Files {
  id         String     @id @default(auto()) @map("_id") @db.ObjectId
  pdfName    String     @map("name")
  pdfUrl     String     @map("pdf_url")
  createdAt  DateTime   @default(now())
  userId     String     @map("user_id") @db.ObjectId
  fileKey    String     @map("file_key")
  subject    String     @map("subject")
  edited     Int        @default(0)
  chatpdf    String?    @map("chatpdf")
  grade      String
  messages   Message[]  @relation("FileMessages")
  activities Activity[]
  User       User       @relation(fields: [userId], references: [id])
}

model Message {
  id        String         @id @default(auto()) @map("_id") @db.ObjectId
  chatId    Int?           @map("chat_id")
  content   String?        @map("content")
  createdAt DateTime       @default(now())
  role      UserSystemEnum @map("role")
  fileId    String         @map("file_id") @db.ObjectId
  files     Files          @relation("FileMessages", fields: [fileId], references: [id])
}

enum UserSystemEnum {
  system
  user
}

enum GameType {
  mcq
  open_ended
}

model Game {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  userId      String     @db.ObjectId
  questions   Question[]
  timeStarted DateTime
  topic       String
  timeEnded   DateTime?
  gameType    GameType
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Question {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  question          String
  answer            String
  gameId            String   @db.ObjectId
  options           Json? // for mcq questions
  percentageCorrect Float? // for open_ended questions
  isCorrect         Boolean? // for mcq questions
  questionType      GameType
  userAnswer        String?

  game       Game      @relation(fields: [gameId], references: [id])
  Activity   Activity? @relation(fields: [activityId], references: [id])
  activityId String?   @db.ObjectId

  @@index([gameId])
}

enum ActivityType {
  mcq
  open_ended
}

model Activity {
  id          String             @id @default(auto()) @map("_id") @db.ObjectId
  uniqueId    String
  userId      String             @db.ObjectId
  questions   QuestionActivity[]
  timeStarted DateTime
  topic       String
  timeEnded   DateTime?
  gameType    ActivityType
  summary     String?
  mpoints     String?
  class       String?
  noteId      String?            @db.ObjectId
  fileId      String             @db.ObjectId
  user        User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  file        Files              @relation(fields: [fileId], references: [id], onDelete: Cascade)
  note        Notes?             @relation(fields: [noteId], references: [id], onDelete: Cascade)
  Question    Question[]

  @@index([userId])
  @@index([fileId])
}

model QuestionActivity {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  question          String
  answer            String
  activityId        String   @db.ObjectId
  options           Json? // for mcq questions
  percentageCorrect Float? // for open_ended questions
  isCorrect         Boolean? // for mcq questions
  questionType      GameType
  userAnswer        String?
  canAnswer         Boolean  @default(true)

  activity Activity @relation(fields: [activityId], references: [id])

  @@index([activityId])
}
